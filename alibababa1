// 以下题目可以用es6语法，不需考虑兼容性，不能借助任何库实现，确认提交前，请自行在chrome inspect中测试、验证

//评测题目: 1-随机字符串生成
/*
实现一个随机符串生成函数 randomStr()，要求如下：
1. 生成的随机的字符串应该以字母开头，并包含 [a-z][0-9] 这些字符。
2. 生成的字符串长度为 8。
3. 生成的字符串不能够在程序运行的生命周期中存在重复的情形。

可以用函数外部的变量
*/
function randomStr(){
  let strArr=[];
  let newstr;
  do{
   let str=['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','0','1','2','3','4','5','6','7','8','9'];
   let firstNum=Math.floor((Math.random()*100)%26);
   let firstChar=str[firstNum];
   let lastNum=Math.floor((Math.random()*100)%36);
   let lastChar;
    newStr=firstChar;
    for(let i=0;i<7;i++){
    lastChar=str[lastNum];
    newStr+=lastChar;
   }
   strArr.push(newStr);
 }while(strArr.indexOf(newStr)!=-1);
}

randomStr();randomStr();


//评测题目: 2-比较版本号
/*
实现一个方法，用于比较两个版本号（version1、version2）
如果version1 > version2，返回1；
如果version1 < version2，返回-1，其他情况返回0。
版本号规则`x.y.z`，xyz均为大于等于0的整数，至少有x位

输入：compareVersion('0.1', '1.1.1')
输出：-1

输入：compareVersion('13.37', '1.2 ')
输出：1

输入：compareVersion('1.1', '1.1.0')
输出：0
*/
function compareVersion(version1, version2){
   let ver1=version1.split('.');
   let ver2=version2.split('.');
   if(ver1.length()==1){
     ver1[1]==0;
     ver[2]==0;
   }else if(ver1.length()==2){
     ver1[2]=0;
   }else{}
  
   if(ver2.length()==1){
     ver2[1]==0;
     ver2[2]==0;
   }else if(ver2.length()==2){
     ver2[2]=0;
   }else{}
    
   
//    判断相等
  if(ver1[0]==ver2[0] && ver1[1]==ver2[1] && ver1[2]==ver2[2]){
     return 0;
  }
  
// 判断大
  if(ver1[0]>ver2[0]){
    return 1;
  }else if(ver1[0]==ver2[0] && ver1[1]>ver2[1]){
     return 1;
  }else if(ver1[0]==ver2[0] && ver1[1]==ver2[1] && ver1[2]>ver2[1]){
    return 1;
  }else{
     return -1;
  }
}

function compareVersionNew(version1, version2){
  let ver1=version1.split('.');
  let ver2=version2.split('.');
  
  const maxlen = Math.max(ver1.length,ver2.length);
  for(let i=0;i<maxlen;i++){
      let item1=ver1[i] || 0;
      let item2=ver2[i] || 0;
    if(item1>item2){
      return 1;
    }else if(){
       return -1;
    }
  }
  return 0;
  
  if(ver1.length()>ver2.length()){
      for(let i=ver2.length();i<ver1.length;i++){
          ver2[i]=0;
      }
    
//    the same
    let flag=true;
    for(let i=0;i<ver1.length();i++){
      if(ver1[i]!==ver2[i]){
        flag=false;
      }
    }
    if(flag==true){
      return 0;
    }
    
    
    
    
  }else if(ver2.length()>ver1.length()){
    for(let i=ver1.length();i<ver2.length;i++){
          ver1[i]=0;
      }
    
    let flag=true;
    for(let i=0;i<ver2.length();i++){
      if(ver1[i]!==ver2[i]){
        flag=false;
      }
    }
    if(flag==true){
      return 0;
    }
    
  }else if(){}
  
  
  
  
  
}






